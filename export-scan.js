document.addEventListener("DOMContentLoaded", function () {
    const exportAllBtn = document.getElementById("export-all-btn");

    exportAllBtn.addEventListener("click", async function () {
        console.log("üìÑ ƒêang t·∫£i to√†n b·ªô d·ªØ li·ªáu ƒë·ªÉ xu·∫•t Excel...");

        try {
            // G·ªçi API export.php ƒë·ªÉ l·∫•y to√†n b·ªô d·ªØ li·ªáu
            const response = await fetch("api/export.php");
            if (!response.ok) throw new Error(`L·ªói HTTP: ${response.status}`);
            const data = await response.json();

            if (!Array.isArray(data) || data.length === 0) {
                alert("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t.");
                return;
            }

            console.log("‚úÖ D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", data);

            // T√≠nh to√°n c·ªôt STATUS d·ª±a tr√™n CHECK_VS v√† ƒë·ªãnh d·∫°ng l·∫°i d·ªØ li·ªáu theo th·ª© t·ª± c·ªôt mong mu·ªën
            const desiredOrder = ["id", "NAME", "TYPE", "STATUS", "TODAY", "CODE"];
            const formattedData = data.map(row => {
                // T√≠nh c·ªôt STATUS
                const status = row.CHECK_VS == 1 ? "‚úÖ ƒê√É HO√ÄN TH√ÄNH" : "‚ùå CH∆ØA HO√ÄN TH√ÄNH";
                // T·∫°o ƒë·ªëi t∆∞·ª£ng m·ªõi v·ªõi c·∫•u tr√∫c mong mu·ªën (c√°c c·ªôt kh√°c c√≥ th·ªÉ ƒë∆∞·ª£c l·∫•y t·ª´ row n·∫øu t·ªìn t·∫°i)
                return {
                    id: row.id,
                    NAME: row.NAME,
                    TYPE: row.TYPE,
                    STATUS: status,
                    TODAY: row.TODAY,
                    CODE: row.CODE
                };
            });

            // T·∫°o m·ªôt m·∫£ng 2D (AOA) v·ªõi ti√™u ƒë·ªÅ c·ªë ƒë·ªãnh theo th·ª© t·ª± desiredOrder
            const headers = desiredOrder;
            const rows = formattedData.map(row =>
                headers.map(header => row[header] !== undefined ? row[header] : "")
            );

            // T·∫°o workbook v√† worksheet
            const wb = XLSX.utils.book_new();
            const ws = XLSX.utils.aoa_to_sheet([headers, ...rows]);

            // (T√πy ch·ªçn) CƒÉn l·ªÅ tr√°i cho c√°c √¥
            const range = XLSX.utils.decode_range(ws["!ref"]);
            for (let C = range.s.c; C <= range.e.c; ++C) {
                const colLetter = XLSX.utils.encode_col(C);
                for (let R = range.s.r; R <= range.e.r; ++R) {
                    const cellAddress = colLetter + XLSX.utils.encode_row(R);
                    if (ws[cellAddress] && ws[cellAddress].t) {
                        ws[cellAddress].s = { alignment: { horizontal: "left" } };
                    }
                }
            }

            // (T√πy ch·ªçn) T√≠nh ƒë·ªô r·ªông t·ªëi ƒëa cho m·ªói c·ªôt
            ws["!cols"] = headers.map((header, i) => {
                const colWidth = Math.max(header.length, ...rows.map(r => r[i].toString().length)) + 2;
                return { wch: colWidth };
            });

            XLSX.utils.book_append_sheet(wb, ws, "To√†n B·ªô D·ªØ Li·ªáu");

            // Xu·∫•t file Excel v·ªõi t√™n file c·ªë ƒë·ªãnh ho·∫∑c d·ª±a tr√™n th·ªùi gian hi·ªán t·∫°i
            XLSX.writeFile(wb, `DanhSachToanBo.xlsx`);

            alert("‚úÖ Xu·∫•t Excel th√†nh c√¥ng!");
        } catch (error) {
            console.error("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu:", error);
            alert("‚ùå L·ªói khi xu·∫•t d·ªØ li·ªáu, vui l√≤ng th·ª≠ l·∫°i.");
        }
    });
});

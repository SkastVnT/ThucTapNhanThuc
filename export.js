document.addEventListener("DOMContentLoaded", function () {
    const exportAllBtn = document.getElementById("export-all-btn");

    exportAllBtn.addEventListener("click", async function () {
        console.log("üìÑ ƒêang t·∫£i to√†n b·ªô d·ªØ li·ªáu ƒë·ªÉ xu·∫•t Excel...");
        try {
            // G·ªçi API export.php ƒë·ªÉ l·∫•y to√†n b·ªô d·ªØ li·ªáu
            const response = await fetch("api/export.php");
            if (!response.ok) throw new Error(`L·ªói HTTP: ${response.status}`);
            const data = await response.json();
            if (!Array.isArray(data) || data.length === 0) {
                alert("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t.");
                return;
            }
            console.log("‚úÖ D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", data);

            // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu: th√™m createdAt & updatedAt
            const formattedData = data.map(row => ({
                id: row.id,
                NAME: row.NAME,
                TYPE: row.TYPE,
                STATUS: row.CHECK_VS == 1 ? "‚úÖ ƒê√É HO√ÄN TH√ÄNH" : "‚ùå CH∆ØA HO√ÄN TH√ÄNH",
                TODAY: row.TODAY,
                CODE: row.CODE,
                createdAt: formatDate(row.createdAt), // ƒê·ªãnh d·∫°ng ng√†y
                updatedAt: formatDate(row.updatedAt)  // ƒê·ªãnh d·∫°ng ng√†y
            }));

            // X√°c ƒë·ªãnh th·ª© t·ª± c·ªôt c·ªë ƒë·ªãnh
            const headers = ["id", "NAME", "TYPE", "STATUS", "TODAY", "CODE", "createdAt", "updatedAt"];

            // T·∫°o m·∫£ng 2D (AOA) cho SheetJS
            const rows = formattedData.map(row =>
                headers.map(header => row[header] !== undefined ? row[header] : "")
            );

            // T·∫°o workbook v√† worksheet b·∫±ng SheetJS
            const wb = XLSX.utils.book_new();
            const ws = XLSX.utils.aoa_to_sheet([headers, ...rows]);

            // (T√πy ch·ªçn) T√≠nh ƒë·ªô r·ªông t·ªëi ƒëa cho m·ªói c·ªôt
            ws["!cols"] = headers.map((header, i) => {
                const colWidth = Math.max(header.length, ...rows.map(r => r[i]?.toString().length || 0)) + 2;
                return { wch: colWidth };
            });

            XLSX.utils.book_append_sheet(wb, ws, "To√†n B·ªô D·ªØ Li·ªáu");

            // Xu·∫•t file Excel v·ªõi t√™n "DanhSachToanBo.xlsx"
            XLSX.writeFile(wb, `DanhSachToanBo.xlsx`);

            alert("‚úÖ Xu·∫•t Excel th√†nh c√¥ng!");
        } catch (error) {
            console.error("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu:", error);
            alert("‚ùå L·ªói khi xu·∫•t d·ªØ li·ªáu, vui l√≤ng th·ª≠ l·∫°i.");
        }
    });

    // H√†m ƒë·ªãnh d·∫°ng ng√†y (YYYY-MM-DD HH:mm:ss)
    function formatDate(dateString) {
        if (!dateString) return ""; // Tr√°nh l·ªói n·∫øu d·ªØ li·ªáu kh√¥ng c√≥ gi√° tr·ªã
        let d = new Date(dateString);
        let year = d.getFullYear();
        let month = String(d.getMonth() + 1).padStart(2, '0');
        let day = String(d.getDate()).padStart(2, '0');
        let hours = String(d.getHours()).padStart(2, '0');
        let minutes = String(d.getMinutes()).padStart(2, '0');
        let seconds = String(d.getSeconds()).padStart(2, '0');

        return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
    }
});
